// SPDX-license-Identifier: MIT
pragma solidity ^0.8.0;


import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";
import "@chainlink/contracts/src/v0.8/vendor/SafeMathChainlink.sol";



    contract bankupdated{

          using SafeMathChainlink for uint256;

        mapping (address => uint256) mybalance;
        address public bankowner;
        string public bankname;
        address[] bankcustomers;
        
        event send ( address _from, address _to, uint256 amount);
        event deposited (uint256 amount);

        constructor () {
            bankowner = msg.sender;
        }


        function changebankname (string memory _name) public {
            require (msg.sender == bankowner);
            bankname = _name;
        }


        function deposit (uint256 amount) external payable {
            require (amount !=0, "You need to deposit more money");
            mybalance[msg.sender] += msg.value;
            bankcustomers.push(msg.sender);
            emit deposited (amount);
        } 


        function withdraw ( address _to, uint256 amount)external payable {
            require (amount < mybalance[msg.sender],"you are trying to withdraw something you dont have");
            mybalance[msg.sender] -= msg.value;
             emit send (msg.sender, _to, amount) ;
        }

        function checkethprice () public view returns (uint256){
               AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);
        (,int256 answer,,,)  =priceFeed.latestRoundData();
        return uint256(answer / 10000000000);
        }   

        function getbalance () public view returns(uint256){
            return mybalance[msg.sender];
        }



    }
